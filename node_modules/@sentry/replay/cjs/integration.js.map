{"version":3,"file":"integration.js","sources":["../../../src/integration.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport type { BrowserClientReplayOptions } from '@sentry/types';\nimport { Integration } from '@sentry/types';\n\nimport {\n  DEFAULT_ERROR_SAMPLE_RATE,\n  DEFAULT_FLUSH_MAX_DELAY,\n  DEFAULT_FLUSH_MIN_DELAY,\n  DEFAULT_SESSION_SAMPLE_RATE,\n  INITIAL_FLUSH_DELAY,\n  MASK_ALL_TEXT_SELECTOR,\n} from './constants';\nimport { ReplayContainer } from './replay';\nimport type { RecordingOptions, ReplayConfiguration, ReplayPluginOptions } from './types';\nimport { isBrowser } from './util/isBrowser';\n\nconst MEDIA_SELECTORS = 'img,image,svg,path,rect,area,video,object,picture,embed,map,audio';\n\nlet _initialized = false;\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n */\nexport class Replay implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Replay';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Replay.id;\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n  readonly recordingOptions: RecordingOptions;\n\n  readonly options: ReplayPluginOptions;\n\n  private _replay?: ReplayContainer;\n\n  constructor({\n    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n    initialFlushDelay = INITIAL_FLUSH_DELAY,\n    stickySession = true,\n    useCompression = true,\n    sessionSampleRate,\n    errorSampleRate,\n    maskAllText,\n    maskTextSelector,\n    maskAllInputs = true,\n    blockAllMedia = true,\n    _experiments = {},\n    blockClass = 'sentry-block',\n    ignoreClass = 'sentry-ignore',\n    maskTextClass = 'sentry-mask',\n    blockSelector = '[data-sentry-block]',\n    ...recordingOptions\n  }: ReplayConfiguration = {}) {\n    this.recordingOptions = {\n      maskAllInputs,\n      blockClass,\n      ignoreClass,\n      maskTextClass,\n      maskTextSelector,\n      blockSelector,\n      ...recordingOptions,\n    };\n\n    this.options = {\n      flushMinDelay,\n      flushMaxDelay,\n      stickySession,\n      initialFlushDelay,\n      sessionSampleRate: DEFAULT_SESSION_SAMPLE_RATE,\n      errorSampleRate: DEFAULT_ERROR_SAMPLE_RATE,\n      useCompression,\n      maskAllText: typeof maskAllText === 'boolean' ? maskAllText : !maskTextSelector,\n      blockAllMedia,\n      _experiments,\n    };\n\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`sessionSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysSessionSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`,\n      );\n\n      this.options.sessionSampleRate = sessionSampleRate;\n    }\n\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`errorSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysOnErrorSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`,\n      );\n\n      this.options.errorSampleRate = errorSampleRate;\n    }\n\n    if (this.options.maskAllText) {\n      // `maskAllText` is a more user friendly option to configure\n      // `maskTextSelector`. This means that all nodes will have their text\n      // content masked.\n      this.recordingOptions.maskTextSelector = MASK_ALL_TEXT_SELECTOR;\n    }\n\n    if (this.options.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this.recordingOptions.blockSelector = !this.recordingOptions.blockSelector\n        ? MEDIA_SELECTORS\n        : `${this.recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n  protected get _isInitialized(): boolean {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n  protected set _isInitialized(value: boolean) {\n    _initialized = value;\n  }\n\n  /**\n   * We previously used to create a transaction in `setupOnce` and it would\n   * potentially create a transaction before some native SDK integrations have run\n   * and applied their own global event processor. An example is:\n   * https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n   *\n   * So we call `replay.setup` in next event loop as a workaround to wait for other\n   * global event processors to finish. This is no longer needed, but keeping it\n   * here to avoid any future issues.\n   */\n  setupOnce(): void {\n    if (!isBrowser()) {\n      return;\n    }\n\n    this._setup();\n\n    // XXX: See method comments above\n    setTimeout(() => this.start());\n  }\n\n  /**\n   * Initializes the plugin.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n  start(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.start();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  stop(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.stop();\n  }\n\n  /** Setup the integration. */\n  private _setup(): void {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    this._loadReplayOptionsFromClient();\n\n    this._replay = new ReplayContainer({\n      options: this.options,\n      recordingOptions: this.recordingOptions,\n    });\n  }\n\n  /** Parse Replay-related options from SDK options */\n  private _loadReplayOptionsFromClient(): void {\n    const client = getCurrentHub().getClient();\n    const opt = client && (client.getOptions() as BrowserClientReplayOptions | undefined);\n\n    if (opt && typeof opt.replaysSessionSampleRate === 'number') {\n      this.options.sessionSampleRate = opt.replaysSessionSampleRate;\n    }\n\n    if (opt && typeof opt.replaysOnErrorSampleRate === 'number') {\n      this.options.errorSampleRate = opt.replaysOnErrorSampleRate;\n    }\n  }\n}\n"],"names":["DEFAULT_FLUSH_MIN_DELAY","DEFAULT_FLUSH_MAX_DELAY","INITIAL_FLUSH_DELAY","DEFAULT_SESSION_SAMPLE_RATE","DEFAULT_ERROR_SAMPLE_RATE","MASK_ALL_TEXT_SELECTOR","isBrowser","ReplayContainer","getCurrentHub"],"mappings":"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"}