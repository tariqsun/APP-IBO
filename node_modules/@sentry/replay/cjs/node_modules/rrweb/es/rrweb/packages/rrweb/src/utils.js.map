{"version":3,"file":"utils.js","sources":["../../../../../../../../../../../../node_modules/rrweb/es/rrweb/packages/rrweb/src/utils.js"],"sourcesContent":["import { __values } from '../ext/tslib/tslib.es6.js';\nimport { IncrementalSource } from './types.js';\nimport { IGNORED_NODE, isShadowRoot, NodeType } from '../../rrweb-snapshot/es/rrweb-snapshot.js';\n\nfunction on(type, fn, target) {\n    if (target === void 0) { target = document; }\n    var options = { capture: true, passive: true };\n    target.addEventListener(type, fn, options);\n    return function () { return target.removeEventListener(type, fn, options); };\n}\nfunction createMirror() {\n    return {\n        map: {},\n        getId: function (n) {\n            if (!n || !n.__sn) {\n                return -1;\n            }\n            return n.__sn.id;\n        },\n        getNode: function (id) {\n            return this.map[id] || null;\n        },\n        removeNodeFromMap: function (n) {\n            var _this = this;\n            var id = n.__sn && n.__sn.id;\n            delete this.map[id];\n            if (n.childNodes) {\n                n.childNodes.forEach(function (child) {\n                    return _this.removeNodeFromMap(child);\n                });\n            }\n        },\n        has: function (id) {\n            return this.map.hasOwnProperty(id);\n        },\n        reset: function () {\n            this.map = {};\n        },\n    };\n}\nvar DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +\n    '\\r\\n' +\n    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +\n    '\\r\\n' +\n    'or you can use record.mirror to access the mirror instance during recording.';\nvar _mirror = {\n    map: {},\n    getId: function () {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return -1;\n    },\n    getNode: function () {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return null;\n    },\n    removeNodeFromMap: function () {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n    has: function () {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return false;\n    },\n    reset: function () {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n    _mirror = new Proxy(_mirror, {\n        get: function (target, prop, receiver) {\n            if (prop === 'map') {\n                console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n}\nfunction throttle(func, wait, options) {\n    if (options === void 0) { options = {}; }\n    var timeout = null;\n    var previous = 0;\n    return function (arg) {\n        var now = Date.now();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        var remaining = wait - (now - previous);\n        var context = this;\n        var args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(function () {\n                previous = options.leading === false ? 0 : Date.now();\n                timeout = null;\n                func.apply(context, args);\n            }, remaining);\n        }\n    };\n}\nfunction hookSetter(target, key, d, isRevoked, win) {\n    if (win === void 0) { win = window; }\n    var original = win.Object.getOwnPropertyDescriptor(target, key);\n    win.Object.defineProperty(target, key, isRevoked\n        ? d\n        : {\n            set: function (value) {\n                var _this = this;\n                setTimeout(function () {\n                    d.set.call(_this, value);\n                }, 0);\n                if (original && original.set) {\n                    original.set.call(this, value);\n                }\n            },\n        });\n    return function () { return hookSetter(target, key, original || {}, true); };\n}\nfunction patch(source, name, replacement) {\n    try {\n        if (!(name in source)) {\n            return function () { };\n        }\n        var original_1 = source[name];\n        var wrapped = replacement(original_1);\n        if (typeof wrapped === 'function') {\n            wrapped.prototype = wrapped.prototype || {};\n            Object.defineProperties(wrapped, {\n                __rrweb_original__: {\n                    enumerable: false,\n                    value: original_1,\n                },\n            });\n        }\n        source[name] = wrapped;\n        return function () {\n            source[name] = original_1;\n        };\n    }\n    catch (_a) {\n        return function () { };\n    }\n}\nfunction getWindowHeight() {\n    return (window.innerHeight ||\n        (document.documentElement && document.documentElement.clientHeight) ||\n        (document.body && document.body.clientHeight));\n}\nfunction getWindowWidth() {\n    return (window.innerWidth ||\n        (document.documentElement && document.documentElement.clientWidth) ||\n        (document.body && document.body.clientWidth));\n}\nfunction isBlocked(node, blockClass) {\n    if (!node) {\n        return false;\n    }\n    if (node.nodeType === node.ELEMENT_NODE) {\n        var needBlock_1 = false;\n        if (typeof blockClass === 'string') {\n            if (node.closest !== undefined) {\n                return node.closest('.' + blockClass) !== null;\n            }\n            else {\n                needBlock_1 = node.classList.contains(blockClass);\n            }\n        }\n        else {\n            node.classList.forEach(function (className) {\n                if (blockClass.test(className)) {\n                    needBlock_1 = true;\n                }\n            });\n        }\n        return needBlock_1 || isBlocked(node.parentNode, blockClass);\n    }\n    if (node.nodeType === node.TEXT_NODE) {\n        return isBlocked(node.parentNode, blockClass);\n    }\n    return isBlocked(node.parentNode, blockClass);\n}\nfunction isIgnored(n) {\n    if ('__sn' in n) {\n        return n.__sn.id === IGNORED_NODE;\n    }\n    return false;\n}\nfunction isAncestorRemoved(target, mirror) {\n    if (isShadowRoot(target)) {\n        return false;\n    }\n    var id = mirror.getId(target);\n    if (!mirror.has(id)) {\n        return true;\n    }\n    if (target.parentNode &&\n        target.parentNode.nodeType === target.DOCUMENT_NODE) {\n        return false;\n    }\n    if (!target.parentNode) {\n        return true;\n    }\n    return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction isTouchEvent(event) {\n    return Boolean(event.changedTouches);\n}\nfunction polyfill(win) {\n    if (win === void 0) { win = window; }\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n        win.NodeList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n        win.DOMTokenList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if (!Node.prototype.contains) {\n        Node.prototype.contains = function contains(node) {\n            if (!(0 in arguments)) {\n                throw new TypeError('1 argument is required');\n            }\n            do {\n                if (this === node) {\n                    return true;\n                }\n            } while ((node = node && node.parentNode));\n            return false;\n        };\n    }\n}\nvar TreeIndex = (function () {\n    function TreeIndex() {\n        this.reset();\n    }\n    TreeIndex.prototype.add = function (mutation) {\n        var parentTreeNode = this.indexes.get(mutation.parentId);\n        var treeNode = {\n            id: mutation.node.id,\n            mutation: mutation,\n            children: [],\n            texts: [],\n            attributes: [],\n        };\n        if (!parentTreeNode) {\n            this.tree[treeNode.id] = treeNode;\n        }\n        else {\n            treeNode.parent = parentTreeNode;\n            parentTreeNode.children[treeNode.id] = treeNode;\n        }\n        this.indexes.set(treeNode.id, treeNode);\n    };\n    TreeIndex.prototype.remove = function (mutation, mirror) {\n        var _this = this;\n        var parentTreeNode = this.indexes.get(mutation.parentId);\n        var treeNode = this.indexes.get(mutation.id);\n        var deepRemoveFromMirror = function (id) {\n            _this.removeIdSet.add(id);\n            var node = mirror.getNode(id);\n            node === null || node === void 0 ? void 0 : node.childNodes.forEach(function (childNode) {\n                if ('__sn' in childNode) {\n                    deepRemoveFromMirror(childNode.__sn.id);\n                }\n            });\n        };\n        var deepRemoveFromTreeIndex = function (node) {\n            _this.removeIdSet.add(node.id);\n            Object.values(node.children).forEach(function (n) { return deepRemoveFromTreeIndex(n); });\n            var _treeNode = _this.indexes.get(node.id);\n            if (_treeNode) {\n                var _parentTreeNode = _treeNode.parent;\n                if (_parentTreeNode) {\n                    delete _treeNode.parent;\n                    delete _parentTreeNode.children[_treeNode.id];\n                    _this.indexes.delete(mutation.id);\n                }\n            }\n        };\n        if (!treeNode) {\n            this.removeNodeMutations.push(mutation);\n            deepRemoveFromMirror(mutation.id);\n        }\n        else if (!parentTreeNode) {\n            delete this.tree[treeNode.id];\n            this.indexes.delete(treeNode.id);\n            deepRemoveFromTreeIndex(treeNode);\n        }\n        else {\n            delete treeNode.parent;\n            delete parentTreeNode.children[treeNode.id];\n            this.indexes.delete(mutation.id);\n            deepRemoveFromTreeIndex(treeNode);\n        }\n    };\n    TreeIndex.prototype.text = function (mutation) {\n        var treeNode = this.indexes.get(mutation.id);\n        if (treeNode) {\n            treeNode.texts.push(mutation);\n        }\n        else {\n            this.textMutations.push(mutation);\n        }\n    };\n    TreeIndex.prototype.attribute = function (mutation) {\n        var treeNode = this.indexes.get(mutation.id);\n        if (treeNode) {\n            treeNode.attributes.push(mutation);\n        }\n        else {\n            this.attributeMutations.push(mutation);\n        }\n    };\n    TreeIndex.prototype.scroll = function (d) {\n        this.scrollMap.set(d.id, d);\n    };\n    TreeIndex.prototype.input = function (d) {\n        this.inputMap.set(d.id, d);\n    };\n    TreeIndex.prototype.flush = function () {\n        var e_1, _a, e_2, _b;\n        var _this = this;\n        var _c = this, tree = _c.tree, removeNodeMutations = _c.removeNodeMutations, textMutations = _c.textMutations, attributeMutations = _c.attributeMutations;\n        var batchMutationData = {\n            source: IncrementalSource.Mutation,\n            removes: removeNodeMutations,\n            texts: textMutations,\n            attributes: attributeMutations,\n            adds: [],\n        };\n        var walk = function (treeNode, removed) {\n            if (removed) {\n                _this.removeIdSet.add(treeNode.id);\n            }\n            batchMutationData.texts = batchMutationData.texts\n                .concat(removed ? [] : treeNode.texts)\n                .filter(function (m) { return !_this.removeIdSet.has(m.id); });\n            batchMutationData.attributes = batchMutationData.attributes\n                .concat(removed ? [] : treeNode.attributes)\n                .filter(function (m) { return !_this.removeIdSet.has(m.id); });\n            if (!_this.removeIdSet.has(treeNode.id) &&\n                !_this.removeIdSet.has(treeNode.mutation.parentId) &&\n                !removed) {\n                batchMutationData.adds.push(treeNode.mutation);\n                if (treeNode.children) {\n                    Object.values(treeNode.children).forEach(function (n) { return walk(n, false); });\n                }\n            }\n            else {\n                Object.values(treeNode.children).forEach(function (n) { return walk(n, true); });\n            }\n        };\n        Object.values(tree).forEach(function (n) { return walk(n, false); });\n        try {\n            for (var _d = __values(this.scrollMap.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                var id = _e.value;\n                if (this.removeIdSet.has(id)) {\n                    this.scrollMap.delete(id);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        try {\n            for (var _f = __values(this.inputMap.keys()), _g = _f.next(); !_g.done; _g = _f.next()) {\n                var id = _g.value;\n                if (this.removeIdSet.has(id)) {\n                    this.inputMap.delete(id);\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        var scrollMap = new Map(this.scrollMap);\n        var inputMap = new Map(this.inputMap);\n        this.reset();\n        return {\n            mutationData: batchMutationData,\n            scrollMap: scrollMap,\n            inputMap: inputMap,\n        };\n    };\n    TreeIndex.prototype.reset = function () {\n        this.tree = [];\n        this.indexes = new Map();\n        this.removeNodeMutations = [];\n        this.textMutations = [];\n        this.attributeMutations = [];\n        this.removeIdSet = new Set();\n        this.scrollMap = new Map();\n        this.inputMap = new Map();\n    };\n    TreeIndex.prototype.idRemoved = function (id) {\n        return this.removeIdSet.has(id);\n    };\n    return TreeIndex;\n}());\nfunction queueToResolveTrees(queue) {\n    var e_3, _a;\n    var queueNodeMap = {};\n    var putIntoMap = function (m, parent) {\n        var nodeInTree = {\n            value: m,\n            parent: parent,\n            children: [],\n        };\n        queueNodeMap[m.node.id] = nodeInTree;\n        return nodeInTree;\n    };\n    var queueNodeTrees = [];\n    try {\n        for (var queue_1 = __values(queue), queue_1_1 = queue_1.next(); !queue_1_1.done; queue_1_1 = queue_1.next()) {\n            var mutation = queue_1_1.value;\n            var nextId = mutation.nextId, parentId = mutation.parentId;\n            if (nextId && nextId in queueNodeMap) {\n                var nextInTree = queueNodeMap[nextId];\n                if (nextInTree.parent) {\n                    var idx = nextInTree.parent.children.indexOf(nextInTree);\n                    nextInTree.parent.children.splice(idx, 0, putIntoMap(mutation, nextInTree.parent));\n                }\n                else {\n                    var idx = queueNodeTrees.indexOf(nextInTree);\n                    queueNodeTrees.splice(idx, 0, putIntoMap(mutation, null));\n                }\n                continue;\n            }\n            if (parentId in queueNodeMap) {\n                var parentInTree = queueNodeMap[parentId];\n                parentInTree.children.push(putIntoMap(mutation, parentInTree));\n                continue;\n            }\n            queueNodeTrees.push(putIntoMap(mutation, null));\n        }\n    }\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n    finally {\n        try {\n            if (queue_1_1 && !queue_1_1.done && (_a = queue_1.return)) _a.call(queue_1);\n        }\n        finally { if (e_3) throw e_3.error; }\n    }\n    return queueNodeTrees;\n}\nfunction iterateResolveTree(tree, cb) {\n    cb(tree.value);\n    for (var i = tree.children.length - 1; i >= 0; i--) {\n        iterateResolveTree(tree.children[i], cb);\n    }\n}\nfunction isIframeINode(node) {\n    if ('__sn' in node) {\n        return (node.__sn.type === NodeType.Element && node.__sn.tagName === 'iframe');\n    }\n    return false;\n}\nfunction getBaseDimension(node, rootIframe) {\n    var _a, _b;\n    var frameElement = (_b = (_a = node.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) === null || _b === void 0 ? void 0 : _b.frameElement;\n    if (!frameElement || frameElement === rootIframe) {\n        return {\n            x: 0,\n            y: 0,\n            relativeScale: 1,\n            absoluteScale: 1,\n        };\n    }\n    var frameDimension = frameElement.getBoundingClientRect();\n    var frameBaseDimension = getBaseDimension(frameElement, rootIframe);\n    var relativeScale = frameDimension.height / frameElement.clientHeight;\n    return {\n        x: frameDimension.x * frameBaseDimension.relativeScale +\n            frameBaseDimension.x,\n        y: frameDimension.y * frameBaseDimension.relativeScale +\n            frameBaseDimension.y,\n        relativeScale: relativeScale,\n        absoluteScale: frameBaseDimension.absoluteScale * relativeScale,\n    };\n}\nfunction hasShadowRoot(n) {\n    return Boolean(n === null || n === void 0 ? void 0 : n.shadowRoot);\n}\n\nexport { TreeIndex, _mirror, createMirror, getBaseDimension, getWindowHeight, getWindowWidth, hasShadowRoot, hookSetter, isAncestorRemoved, isBlocked, isIframeINode, isIgnored, isTouchEvent, iterateResolveTree, on, patch, polyfill, queueToResolveTrees, throttle };\n"],"names":["_mirror","IGNORED_NODE","isShadowRoot","IncrementalSource","__values","NodeType"],"mappings":"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"}