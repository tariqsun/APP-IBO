{"version":3,"file":"index.js","sources":["../../../../../../../../../../../../../../../node_modules/rrweb/es/rrweb/packages/rrweb/src/plugins/console/record/index.js"],"sourcesContent":["import { __values, __spreadArray, __read } from '../../../../ext/tslib/tslib.es6.js';\nimport { patch } from '../../../utils.js';\nimport { ErrorStackParser } from './error-stack-parser.js';\nimport { stringify } from './stringify.js';\n\nvar defaultLogOptions = {\n    level: [\n        'assert',\n        'clear',\n        'count',\n        'countReset',\n        'debug',\n        'dir',\n        'dirxml',\n        'error',\n        'group',\n        'groupCollapsed',\n        'groupEnd',\n        'info',\n        'log',\n        'table',\n        'time',\n        'timeEnd',\n        'timeLog',\n        'trace',\n        'warn',\n    ],\n    lengthThreshold: 1000,\n    logger: 'console',\n};\nfunction initLogObserver(cb, win, logOptions) {\n    var e_1, _a;\n    var loggerType = logOptions.logger;\n    if (!loggerType) {\n        return function () { };\n    }\n    var logger;\n    if (typeof loggerType === 'string') {\n        logger = win[loggerType];\n    }\n    else {\n        logger = loggerType;\n    }\n    var logCount = 0;\n    var cancelHandlers = [];\n    if (logOptions.level.includes('error')) {\n        if (window) {\n            var errorHandler_1 = function (event) {\n                var message = event.message, error = event.error;\n                var trace = ErrorStackParser.parse(error).map(function (stackFrame) { return stackFrame.toString(); });\n                var payload = [stringify(message, logOptions.stringifyOptions)];\n                cb({\n                    level: 'error',\n                    trace: trace,\n                    payload: payload,\n                });\n            };\n            window.addEventListener('error', errorHandler_1);\n            cancelHandlers.push(function () {\n                if (window)\n                    window.removeEventListener('error', errorHandler_1);\n            });\n        }\n    }\n    try {\n        for (var _b = __values(logOptions.level), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var levelType = _c.value;\n            cancelHandlers.push(replace(logger, levelType));\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return function () {\n        cancelHandlers.forEach(function (h) { return h(); });\n    };\n    function replace(_logger, level) {\n        var _this = this;\n        if (!_logger[level]) {\n            return function () { };\n        }\n        return patch(_logger, level, function (original) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                original.apply(_this, args);\n                try {\n                    var trace = ErrorStackParser.parse(new Error())\n                        .map(function (stackFrame) { return stackFrame.toString(); })\n                        .splice(1);\n                    var payload = args.map(function (s) {\n                        return stringify(s, logOptions.stringifyOptions);\n                    });\n                    logCount++;\n                    if (logCount < logOptions.lengthThreshold) {\n                        cb({\n                            level: level,\n                            trace: trace,\n                            payload: payload,\n                        });\n                    }\n                    else if (logCount === logOptions.lengthThreshold) {\n                        cb({\n                            level: 'warn',\n                            trace: [],\n                            payload: [\n                                stringify('The number of log records reached the threshold.'),\n                            ],\n                        });\n                    }\n                }\n                catch (error) {\n                    original.apply(void 0, __spreadArray(['rrweb logger error:', error], __read(args), false));\n                }\n            };\n        });\n    }\n}\nvar PLUGIN_NAME = 'rrweb/console@1';\nvar getRecordConsolePlugin = function (options) { return ({\n    name: PLUGIN_NAME,\n    observer: initLogObserver,\n    options: options\n        ? Object.assign({}, defaultLogOptions, options)\n        : defaultLogOptions,\n}); };\n\nexport { PLUGIN_NAME, getRecordConsolePlugin };\n"],"names":["ErrorStackParser","stringify","__values","patch","__spreadArray","__read"],"mappings":"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"}