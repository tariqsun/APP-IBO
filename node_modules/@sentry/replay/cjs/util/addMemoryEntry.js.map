{"version":3,"file":"addMemoryEntry.js","sources":["../../../../src/util/addMemoryEntry.ts"],"sourcesContent":["import { WINDOW } from '../constants';\nimport type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from './createPerformanceSpans';\n\ntype ReplayMemoryEntry = ReplayPerformanceEntry & { data: { memory: MemoryInfo } };\n\ninterface MemoryInfo {\n  jsHeapSizeLimit: number;\n  totalJSHeapSize: number;\n  usedJSHeapSize: number;\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nexport function addMemoryEntry(replay: ReplayContainer): void {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    createPerformanceSpans(replay, [\n      // @ts-ignore memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n      createMemoryEntry(WINDOW.performance.memory),\n    ]);\n  } catch (error) {\n    // Do nothing\n  }\n}\n\nfunction createMemoryEntry(memoryEntry: MemoryInfo): ReplayMemoryEntry {\n  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = new Date().getTime() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize,\n      },\n    },\n  };\n}\n"],"names":["createPerformanceSpans","WINDOW"],"mappings":";;;;;AAYA;AACA;AACA;AACA;AACA,SAAA,cAAA,CAAA,MAAA,EAAA;AACA;AACA,EAAA,IAAA;AACA,IAAAA,6CAAA,CAAA,MAAA,EAAA;AACA;AACA,MAAA,iBAAA,CAAAC,gBAAA,CAAA,WAAA,CAAA,MAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA,OAAA,KAAA,EAAA;AACA;AACA,GAAA;AACA,CAAA;AACA;AACA,SAAA,iBAAA,CAAA,WAAA,EAAA;AACA,EAAA,MAAA,EAAA,eAAA,EAAA,eAAA,EAAA,cAAA,EAAA,GAAA,WAAA,CAAA;AACA;AACA;AACA,EAAA,MAAA,IAAA,GAAA,IAAA,IAAA,EAAA,CAAA,OAAA,EAAA,GAAA,IAAA,CAAA;AACA,EAAA,OAAA;AACA,IAAA,IAAA,EAAA,QAAA;AACA,IAAA,IAAA,EAAA,QAAA;AACA,IAAA,KAAA,EAAA,IAAA;AACA,IAAA,GAAA,EAAA,IAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,MAAA,EAAA;AACA,QAAA,eAAA;AACA,QAAA,eAAA;AACA,QAAA,cAAA;AACA,OAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;;;;"}