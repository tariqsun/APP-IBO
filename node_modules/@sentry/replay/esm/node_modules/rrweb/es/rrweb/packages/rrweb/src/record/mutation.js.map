{"version":3,"file":"mutation.js","sources":["../../../../../../../../../../../../../node_modules/rrweb/es/rrweb/packages/rrweb/src/record/mutation.js"],"sourcesContent":["import { __values } from '../../ext/tslib/tslib.es6.js';\nimport { isShadowRoot, maskInputValue, transformAttribute, needMaskingText, IGNORED_NODE, serializeNodeWithId } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { isIgnored, isBlocked, isAncestorRemoved, isIframeINode, hasShadowRoot } from '../utils.js';\n\nfunction isNodeInLinkedList(n) {\n    return '__ln' in n;\n}\nvar DoubleLinkedList = (function () {\n    function DoubleLinkedList() {\n        this.length = 0;\n        this.head = null;\n    }\n    DoubleLinkedList.prototype.get = function (position) {\n        if (position >= this.length) {\n            throw new Error('Position outside of list range');\n        }\n        var current = this.head;\n        for (var index = 0; index < position; index++) {\n            current = (current === null || current === void 0 ? void 0 : current.next) || null;\n        }\n        return current;\n    };\n    DoubleLinkedList.prototype.addNode = function (n) {\n        var node = {\n            value: n,\n            previous: null,\n            next: null,\n        };\n        n.__ln = node;\n        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n            var current = n.previousSibling.__ln.next;\n            node.next = current;\n            node.previous = n.previousSibling.__ln;\n            n.previousSibling.__ln.next = node;\n            if (current) {\n                current.previous = node;\n            }\n        }\n        else if (n.nextSibling &&\n            isNodeInLinkedList(n.nextSibling) &&\n            n.nextSibling.__ln.previous) {\n            var current = n.nextSibling.__ln.previous;\n            node.previous = current;\n            node.next = n.nextSibling.__ln;\n            n.nextSibling.__ln.previous = node;\n            if (current) {\n                current.next = node;\n            }\n        }\n        else {\n            if (this.head) {\n                this.head.previous = node;\n            }\n            node.next = this.head;\n            this.head = node;\n        }\n        this.length++;\n    };\n    DoubleLinkedList.prototype.removeNode = function (n) {\n        var current = n.__ln;\n        if (!this.head) {\n            return;\n        }\n        if (!current.previous) {\n            this.head = current.next;\n            if (this.head) {\n                this.head.previous = null;\n            }\n        }\n        else {\n            current.previous.next = current.next;\n            if (current.next) {\n                current.next.previous = current.previous;\n            }\n        }\n        if (n.__ln) {\n            delete n.__ln;\n        }\n        this.length--;\n    };\n    return DoubleLinkedList;\n}());\nvar moveKey = function (id, parentId) { return \"\".concat(id, \"@\").concat(parentId); };\nfunction isINode(n) {\n    return '__sn' in n;\n}\nvar MutationBuffer = (function () {\n    function MutationBuffer() {\n        var _this = this;\n        this.frozen = false;\n        this.locked = false;\n        this.texts = [];\n        this.attributes = [];\n        this.removes = [];\n        this.mapRemoves = [];\n        this.movedMap = {};\n        this.addedSet = new Set();\n        this.movedSet = new Set();\n        this.droppedSet = new Set();\n        this.processMutations = function (mutations) {\n            mutations.forEach(_this.processMutation);\n            _this.emit();\n        };\n        this.emit = function () {\n            var e_1, _a, e_2, _b;\n            if (_this.frozen || _this.locked) {\n                return;\n            }\n            var adds = [];\n            var addList = new DoubleLinkedList();\n            var getNextId = function (n) {\n                var ns = n;\n                var nextId = IGNORED_NODE;\n                while (nextId === IGNORED_NODE) {\n                    ns = ns && ns.nextSibling;\n                    nextId = ns && _this.mirror.getId(ns);\n                }\n                return nextId;\n            };\n            var pushAdd = function (n) {\n                var _a, _b, _c, _d, _e;\n                var shadowHost = n.getRootNode\n                    ? (_a = n.getRootNode()) === null || _a === void 0 ? void 0 : _a.host\n                    : null;\n                var rootShadowHost = shadowHost;\n                while ((_c = (_b = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _b === void 0 ? void 0 : _b.call(rootShadowHost)) === null || _c === void 0 ? void 0 : _c.host)\n                    rootShadowHost =\n                        ((_e = (_d = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _d === void 0 ? void 0 : _d.call(rootShadowHost)) === null || _e === void 0 ? void 0 : _e.host) ||\n                            null;\n                var notInDoc = !_this.doc.contains(n) &&\n                    (rootShadowHost === null || !_this.doc.contains(rootShadowHost));\n                if (!n.parentNode || notInDoc) {\n                    return;\n                }\n                var parentId = isShadowRoot(n.parentNode)\n                    ? _this.mirror.getId(shadowHost)\n                    : _this.mirror.getId(n.parentNode);\n                var nextId = getNextId(n);\n                if (parentId === -1 || nextId === -1) {\n                    return addList.addNode(n);\n                }\n                var sn = serializeNodeWithId(n, {\n                    doc: _this.doc,\n                    map: _this.mirror.map,\n                    blockClass: _this.blockClass,\n                    blockSelector: _this.blockSelector,\n                    maskTextClass: _this.maskTextClass,\n                    maskTextSelector: _this.maskTextSelector,\n                    skipChild: true,\n                    inlineStylesheet: _this.inlineStylesheet,\n                    maskInputOptions: _this.maskInputOptions,\n                    maskTextFn: _this.maskTextFn,\n                    maskInputFn: _this.maskInputFn,\n                    slimDOMOptions: _this.slimDOMOptions,\n                    recordCanvas: _this.recordCanvas,\n                    inlineImages: _this.inlineImages,\n                    onSerialize: function (currentN) {\n                        if (isIframeINode(currentN)) {\n                            _this.iframeManager.addIframe(currentN);\n                        }\n                        if (hasShadowRoot(n)) {\n                            _this.shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                        }\n                    },\n                    onIframeLoad: function (iframe, childSn) {\n                        _this.iframeManager.attachIframe(iframe, childSn);\n                        _this.shadowDomManager.observeAttachShadow(iframe);\n                    },\n                });\n                if (sn) {\n                    adds.push({\n                        parentId: parentId,\n                        nextId: nextId,\n                        node: sn,\n                    });\n                }\n            };\n            while (_this.mapRemoves.length) {\n                _this.mirror.removeNodeFromMap(_this.mapRemoves.shift());\n            }\n            try {\n                for (var _c = __values(_this.movedSet), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var n = _d.value;\n                    if (isParentRemoved(_this.removes, n, _this.mirror) &&\n                        !_this.movedSet.has(n.parentNode)) {\n                        continue;\n                    }\n                    pushAdd(n);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            try {\n                for (var _e = __values(_this.addedSet), _f = _e.next(); !_f.done; _f = _e.next()) {\n                    var n = _f.value;\n                    if (!isAncestorInSet(_this.droppedSet, n) &&\n                        !isParentRemoved(_this.removes, n, _this.mirror)) {\n                        pushAdd(n);\n                    }\n                    else if (isAncestorInSet(_this.movedSet, n)) {\n                        pushAdd(n);\n                    }\n                    else {\n                        _this.droppedSet.add(n);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            var candidate = null;\n            while (addList.length) {\n                var node = null;\n                if (candidate) {\n                    var parentId = _this.mirror.getId(candidate.value.parentNode);\n                    var nextId = getNextId(candidate.value);\n                    if (parentId !== -1 && nextId !== -1) {\n                        node = candidate;\n                    }\n                }\n                if (!node) {\n                    for (var index = addList.length - 1; index >= 0; index--) {\n                        var _node = addList.get(index);\n                        if (_node) {\n                            var parentId = _this.mirror.getId(_node.value.parentNode);\n                            var nextId = getNextId(_node.value);\n                            if (parentId !== -1 && nextId !== -1) {\n                                node = _node;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!node) {\n                    while (addList.head) {\n                        addList.removeNode(addList.head.value);\n                    }\n                    break;\n                }\n                candidate = node.previous;\n                addList.removeNode(node.value);\n                pushAdd(node.value);\n            }\n            var payload = {\n                texts: _this.texts\n                    .map(function (text) { return ({\n                    id: _this.mirror.getId(text.node),\n                    value: text.value,\n                }); })\n                    .filter(function (text) { return _this.mirror.has(text.id); }),\n                attributes: _this.attributes\n                    .map(function (attribute) { return ({\n                    id: _this.mirror.getId(attribute.node),\n                    attributes: attribute.attributes,\n                }); })\n                    .filter(function (attribute) { return _this.mirror.has(attribute.id); }),\n                removes: _this.removes,\n                adds: adds,\n            };\n            if (!payload.texts.length &&\n                !payload.attributes.length &&\n                !payload.removes.length &&\n                !payload.adds.length) {\n                return;\n            }\n            _this.texts = [];\n            _this.attributes = [];\n            _this.removes = [];\n            _this.addedSet = new Set();\n            _this.movedSet = new Set();\n            _this.droppedSet = new Set();\n            _this.movedMap = {};\n            _this.mutationCb(payload);\n        };\n        this.processMutation = function (m) {\n            var e_3, _a, e_4, _b;\n            if (isIgnored(m.target)) {\n                return;\n            }\n            switch (m.type) {\n                case 'characterData': {\n                    var value = m.target.textContent;\n                    if (!isBlocked(m.target, _this.blockClass) && value !== m.oldValue) {\n                        _this.texts.push({\n                            value: needMaskingText(m.target, _this.maskTextClass, _this.maskTextSelector) && value\n                                ? _this.maskTextFn\n                                    ? _this.maskTextFn(value)\n                                    : value.replace(/[\\S]/g, '*')\n                                : value,\n                            node: m.target,\n                        });\n                    }\n                    break;\n                }\n                case 'attributes': {\n                    var target = m.target;\n                    var value = m.target.getAttribute(m.attributeName);\n                    if (m.attributeName === 'value') {\n                        value = maskInputValue({\n                            maskInputOptions: _this.maskInputOptions,\n                            tagName: m.target.tagName,\n                            type: m.target.getAttribute('type'),\n                            value: value,\n                            maskInputFn: _this.maskInputFn,\n                        });\n                    }\n                    if (isBlocked(m.target, _this.blockClass) || value === m.oldValue) {\n                        return;\n                    }\n                    var item = _this.attributes.find(function (a) { return a.node === m.target; });\n                    if (!item) {\n                        item = {\n                            node: m.target,\n                            attributes: {},\n                        };\n                        _this.attributes.push(item);\n                    }\n                    if (m.attributeName === 'style') {\n                        var old = _this.doc.createElement('span');\n                        if (m.oldValue) {\n                            old.setAttribute('style', m.oldValue);\n                        }\n                        if (item.attributes.style === undefined ||\n                            item.attributes.style === null) {\n                            item.attributes.style = {};\n                        }\n                        var styleObj = item.attributes.style;\n                        try {\n                            for (var _c = __values(Array.from(target.style)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                                var pname = _d.value;\n                                var newValue = target.style.getPropertyValue(pname);\n                                var newPriority = target.style.getPropertyPriority(pname);\n                                if (newValue !== old.style.getPropertyValue(pname) ||\n                                    newPriority !== old.style.getPropertyPriority(pname)) {\n                                    if (newPriority === '') {\n                                        styleObj[pname] = newValue;\n                                    }\n                                    else {\n                                        styleObj[pname] = [newValue, newPriority];\n                                    }\n                                }\n                            }\n                        }\n                        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                        finally {\n                            try {\n                                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                            }\n                            finally { if (e_3) throw e_3.error; }\n                        }\n                        try {\n                            for (var _e = __values(Array.from(old.style)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                                var pname = _f.value;\n                                if (target.style.getPropertyValue(pname) === '') {\n                                    styleObj[pname] = false;\n                                }\n                            }\n                        }\n                        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                        finally {\n                            try {\n                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                            }\n                            finally { if (e_4) throw e_4.error; }\n                        }\n                    }\n                    else {\n                        item.attributes[m.attributeName] = transformAttribute(_this.doc, m.target.tagName, m.attributeName, value);\n                    }\n                    break;\n                }\n                case 'childList': {\n                    m.addedNodes.forEach(function (n) { return _this.genAdds(n, m.target); });\n                    m.removedNodes.forEach(function (n) {\n                        var nodeId = _this.mirror.getId(n);\n                        var parentId = isShadowRoot(m.target)\n                            ? _this.mirror.getId(m.target.host)\n                            : _this.mirror.getId(m.target);\n                        if (isBlocked(m.target, _this.blockClass) || isIgnored(n)) {\n                            return;\n                        }\n                        if (_this.addedSet.has(n)) {\n                            deepDelete(_this.addedSet, n);\n                            _this.droppedSet.add(n);\n                        }\n                        else if (_this.addedSet.has(m.target) && nodeId === -1) ;\n                        else if (isAncestorRemoved(m.target, _this.mirror)) ;\n                        else if (_this.movedSet.has(n) &&\n                            _this.movedMap[moveKey(nodeId, parentId)]) {\n                            deepDelete(_this.movedSet, n);\n                        }\n                        else {\n                            _this.removes.push({\n                                parentId: parentId,\n                                id: nodeId,\n                                isShadow: isShadowRoot(m.target) ? true : undefined,\n                            });\n                        }\n                        _this.mapRemoves.push(n);\n                    });\n                    break;\n                }\n            }\n        };\n        this.genAdds = function (n, target) {\n            if (target && isBlocked(target, _this.blockClass)) {\n                return;\n            }\n            if (isINode(n)) {\n                if (isIgnored(n)) {\n                    return;\n                }\n                _this.movedSet.add(n);\n                var targetId = null;\n                if (target && isINode(target)) {\n                    targetId = target.__sn.id;\n                }\n                if (targetId) {\n                    _this.movedMap[moveKey(n.__sn.id, targetId)] = true;\n                }\n            }\n            else {\n                _this.addedSet.add(n);\n                _this.droppedSet.delete(n);\n            }\n            if (!isBlocked(n, _this.blockClass))\n                n.childNodes.forEach(function (childN) { return _this.genAdds(childN); });\n        };\n    }\n    MutationBuffer.prototype.init = function (options) {\n        var _this = this;\n        [\n            'mutationCb',\n            'blockClass',\n            'blockSelector',\n            'maskTextClass',\n            'maskTextSelector',\n            'inlineStylesheet',\n            'maskInputOptions',\n            'maskTextFn',\n            'maskInputFn',\n            'recordCanvas',\n            'inlineImages',\n            'slimDOMOptions',\n            'doc',\n            'mirror',\n            'iframeManager',\n            'shadowDomManager',\n            'canvasManager',\n        ].forEach(function (key) {\n            _this[key] = options[key];\n        });\n    };\n    MutationBuffer.prototype.freeze = function () {\n        this.frozen = true;\n        this.canvasManager.freeze();\n    };\n    MutationBuffer.prototype.unfreeze = function () {\n        this.frozen = false;\n        this.canvasManager.unfreeze();\n        this.emit();\n    };\n    MutationBuffer.prototype.isFrozen = function () {\n        return this.frozen;\n    };\n    MutationBuffer.prototype.lock = function () {\n        this.locked = true;\n        this.canvasManager.lock();\n    };\n    MutationBuffer.prototype.unlock = function () {\n        this.locked = false;\n        this.canvasManager.unlock();\n        this.emit();\n    };\n    MutationBuffer.prototype.reset = function () {\n        this.shadowDomManager.reset();\n        this.canvasManager.reset();\n    };\n    return MutationBuffer;\n}());\nfunction deepDelete(addsSet, n) {\n    addsSet.delete(n);\n    n.childNodes.forEach(function (childN) { return deepDelete(addsSet, childN); });\n}\nfunction isParentRemoved(removes, n, mirror) {\n    var parentNode = n.parentNode;\n    if (!parentNode) {\n        return false;\n    }\n    var parentId = mirror.getId(parentNode);\n    if (removes.some(function (r) { return r.id === parentId; })) {\n        return true;\n    }\n    return isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n    var parentNode = n.parentNode;\n    if (!parentNode) {\n        return false;\n    }\n    if (set.has(parentNode)) {\n        return true;\n    }\n    return isAncestorInSet(set, parentNode);\n}\n\nexport default MutationBuffer;\n"],"names":[],"mappings":"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"}