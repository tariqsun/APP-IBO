{"version":3,"file":"error-stack-parser.js","sources":["../../../../../../../../../../../../../../../node_modules/rrweb/es/rrweb/packages/rrweb/src/plugins/console/record/error-stack-parser.js"],"sourcesContent":["var StackFrame = (function () {\n    function StackFrame(obj) {\n        this.fileName = obj.fileName || '';\n        this.functionName = obj.functionName || '';\n        this.lineNumber = obj.lineNumber;\n        this.columnNumber = obj.columnNumber;\n    }\n    StackFrame.prototype.toString = function () {\n        var lineNumber = this.lineNumber || '';\n        var columnNumber = this.columnNumber || '';\n        if (this.functionName) {\n            return (this.functionName +\n                ' (' +\n                this.fileName +\n                ':' +\n                lineNumber +\n                ':' +\n                columnNumber +\n                ')');\n        }\n        return this.fileName + ':' + lineNumber + ':' + columnNumber;\n    };\n    return StackFrame;\n}());\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = {\n    parse: function (error) {\n        if (!error) {\n            return [];\n        }\n        if (typeof error.stacktrace !== 'undefined' ||\n            typeof error['opera#sourceloc'] !== 'undefined') {\n            return this.parseOpera(error);\n        }\n        else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n            return this.parseV8OrIE(error);\n        }\n        else if (error.stack) {\n            return this.parseFFOrSafari(error);\n        }\n        else {\n            throw new Error('Cannot parse given Error object');\n        }\n    },\n    extractLocation: function (urlLike) {\n        if (urlLike.indexOf(':') === -1) {\n            return [urlLike];\n        }\n        var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n        var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n        if (!parts)\n            throw new Error(\"Cannot parse given url: \".concat(urlLike));\n        return [parts[1], parts[2] || undefined, parts[3] || undefined];\n    },\n    parseV8OrIE: function (error) {\n        var filtered = error.stack.split('\\n').filter(function (line) {\n            return !!line.match(CHROME_IE_STACK_REGEXP);\n        }, this);\n        return filtered.map(function (line) {\n            if (line.indexOf('(eval ') > -1) {\n                line = line\n                    .replace(/eval code/g, 'eval')\n                    .replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\n            }\n            var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(');\n            var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/);\n            sanitizedLine = location\n                ? sanitizedLine.replace(location[0], '')\n                : sanitizedLine;\n            var tokens = sanitizedLine.split(/\\s+/).slice(1);\n            var locationParts = this.extractLocation(location ? location[1] : tokens.pop());\n            var functionName = tokens.join(' ') || undefined;\n            var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1\n                ? undefined\n                : locationParts[0];\n            return new StackFrame({\n                functionName: functionName,\n                fileName: fileName,\n                lineNumber: locationParts[1],\n                columnNumber: locationParts[2],\n            });\n        }, this);\n    },\n    parseFFOrSafari: function (error) {\n        var filtered = error.stack.split('\\n').filter(function (line) {\n            return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n        }, this);\n        return filtered.map(function (line) {\n            if (line.indexOf(' > eval') > -1) {\n                line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n            }\n            if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                return new StackFrame({\n                    functionName: line,\n                });\n            }\n            else {\n                var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n                var matches = line.match(functionNameRegex);\n                var functionName = matches && matches[1] ? matches[1] : undefined;\n                var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n                return new StackFrame({\n                    functionName: functionName,\n                    fileName: locationParts[0],\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                });\n            }\n        }, this);\n    },\n    parseOpera: function (e) {\n        if (!e.stacktrace ||\n            (e.message.indexOf('\\n') > -1 &&\n                e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\n            return this.parseOpera9(e);\n        }\n        else if (!e.stack) {\n            return this.parseOpera10(e);\n        }\n        else {\n            return this.parseOpera11(e);\n        }\n    },\n    parseOpera9: function (e) {\n        var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n        var lines = e.message.split('\\n');\n        var result = [];\n        for (var i = 2, len = lines.length; i < len; i += 2) {\n            var match = lineRE.exec(lines[i]);\n            if (match) {\n                result.push(new StackFrame({\n                    fileName: match[2],\n                    lineNumber: parseFloat(match[1]),\n                }));\n            }\n        }\n        return result;\n    },\n    parseOpera10: function (e) {\n        var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n        var lines = e.stacktrace.split('\\n');\n        var result = [];\n        for (var i = 0, len = lines.length; i < len; i += 2) {\n            var match = lineRE.exec(lines[i]);\n            if (match) {\n                result.push(new StackFrame({\n                    functionName: match[3] || undefined,\n                    fileName: match[2],\n                    lineNumber: parseFloat(match[1]),\n                }));\n            }\n        }\n        return result;\n    },\n    parseOpera11: function (error) {\n        var filtered = error.stack.split('\\n').filter(function (line) {\n            return (!!line.match(FIREFOX_SAFARI_STACK_REGEXP) &&\n                !line.match(/^Error created at/));\n        }, this);\n        return filtered.map(function (line) {\n            var tokens = line.split('@');\n            var locationParts = this.extractLocation(tokens.pop());\n            var functionCall = tokens.shift() || '';\n            var functionName = functionCall\n                .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                .replace(/\\([^)]*\\)/g, '') || undefined;\n            return new StackFrame({\n                functionName: functionName,\n                fileName: locationParts[0],\n                lineNumber: locationParts[1],\n                columnNumber: locationParts[2],\n            });\n        }, this);\n    },\n};\n\nexport { ErrorStackParser, StackFrame };\n"],"names":[],"mappings":"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"}