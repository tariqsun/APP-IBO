{"version":3,"file":"index.js","sources":["../../../../../../../../../../../../../../../node_modules/rrweb/es/rrweb/packages/rrweb/src/plugins/console/replay/index.js"],"sourcesContent":["import { __values, __spreadArray, __read } from '../../../../ext/tslib/tslib.es6.js';\nimport { PLUGIN_NAME } from '../record/index.js';\nimport { EventType, IncrementalSource } from '../../../types.js';\n\nvar ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nvar defaultLogConfig = {\n    level: [\n        'assert',\n        'clear',\n        'count',\n        'countReset',\n        'debug',\n        'dir',\n        'dirxml',\n        'error',\n        'group',\n        'groupCollapsed',\n        'groupEnd',\n        'info',\n        'log',\n        'table',\n        'time',\n        'timeEnd',\n        'timeLog',\n        'trace',\n        'warn',\n    ],\n    replayLogger: undefined,\n};\nvar LogReplayPlugin = (function () {\n    function LogReplayPlugin(config) {\n        this.config = Object.assign(defaultLogConfig, config);\n    }\n    LogReplayPlugin.prototype.getConsoleLogger = function () {\n        var e_1, _a;\n        var _this = this;\n        var replayLogger = {};\n        var _loop_1 = function (level) {\n            if (level === 'trace') {\n                replayLogger[level] = function (data) {\n                    var logger = console.log[ORIGINAL_ATTRIBUTE_NAME]\n                        ? console.log[ORIGINAL_ATTRIBUTE_NAME]\n                        : console.log;\n                    logger.apply(void 0, __spreadArray(__spreadArray([], __read(data.payload.map(function (s) { return JSON.parse(s); })), false), [_this.formatMessage(data)], false));\n                };\n            }\n            else {\n                replayLogger[level] = function (data) {\n                    var logger = console[level][ORIGINAL_ATTRIBUTE_NAME]\n                        ? console[level][ORIGINAL_ATTRIBUTE_NAME]\n                        : console[level];\n                    logger.apply(void 0, __spreadArray(__spreadArray([], __read(data.payload.map(function (s) { return JSON.parse(s); })), false), [_this.formatMessage(data)], false));\n                };\n            }\n        };\n        try {\n            for (var _b = __values(this.config.level), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var level = _c.value;\n                _loop_1(level);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return replayLogger;\n    };\n    LogReplayPlugin.prototype.formatMessage = function (data) {\n        if (data.trace.length === 0) {\n            return '';\n        }\n        var stackPrefix = '\\n\\tat ';\n        var result = stackPrefix;\n        result += data.trace.join(stackPrefix);\n        return result;\n    };\n    return LogReplayPlugin;\n}());\nvar getReplayConsolePlugin = function (options) {\n    var replayLogger = (options === null || options === void 0 ? void 0 : options.replayLogger) || new LogReplayPlugin(options).getConsoleLogger();\n    return {\n        handler: function (event, _isSync, context) {\n            var logData = null;\n            if (event.type === EventType.IncrementalSnapshot &&\n                event.data.source === IncrementalSource.Log) {\n                logData = event.data;\n            }\n            else if (event.type === EventType.Plugin &&\n                event.data.plugin === PLUGIN_NAME) {\n                logData = event.data.payload;\n            }\n            if (logData) {\n                try {\n                    if (typeof replayLogger[logData.level] === 'function') {\n                        replayLogger[logData.level](logData);\n                    }\n                }\n                catch (error) {\n                    if (context.replayer.config.showWarning) {\n                        console.warn(error);\n                    }\n                }\n            }\n        },\n    };\n};\n\nexport { getReplayConsolePlugin };\n"],"names":[],"mappings":"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"}