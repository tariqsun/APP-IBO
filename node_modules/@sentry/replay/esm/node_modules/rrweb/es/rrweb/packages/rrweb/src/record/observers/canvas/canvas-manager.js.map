{"version":3,"file":"canvas-manager.js","sources":["../../../../../../../../../../../../../../../node_modules/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js"],"sourcesContent":["import { __rest } from '../../../../ext/tslib/tslib.es6.js';\nimport initCanvas2DMutationObserver from './2d.js';\nimport initCanvasContextObserver from './canvas.js';\nimport initCanvasWebGLMutationObserver from './webgl.js';\n\nvar CanvasManager = (function () {\n    function CanvasManager(options) {\n        this.pendingCanvasMutations = new Map();\n        this.rafStamps = { latestId: 0, invokeId: null };\n        this.frozen = false;\n        this.locked = false;\n        this.processMutation = function (target, mutation) {\n            var newFrame = this.rafStamps.invokeId &&\n                this.rafStamps.latestId !== this.rafStamps.invokeId;\n            if (newFrame || !this.rafStamps.invokeId)\n                this.rafStamps.invokeId = this.rafStamps.latestId;\n            if (!this.pendingCanvasMutations.has(target)) {\n                this.pendingCanvasMutations.set(target, []);\n            }\n            this.pendingCanvasMutations.get(target).push(mutation);\n        };\n        this.mutationCb = options.mutationCb;\n        this.mirror = options.mirror;\n        if (options.recordCanvas === true)\n            this.initCanvasMutationObserver(options.win, options.blockClass);\n    }\n    CanvasManager.prototype.reset = function () {\n        this.pendingCanvasMutations.clear();\n        this.resetObservers && this.resetObservers();\n    };\n    CanvasManager.prototype.freeze = function () {\n        this.frozen = true;\n    };\n    CanvasManager.prototype.unfreeze = function () {\n        this.frozen = false;\n    };\n    CanvasManager.prototype.lock = function () {\n        this.locked = true;\n    };\n    CanvasManager.prototype.unlock = function () {\n        this.locked = false;\n    };\n    CanvasManager.prototype.initCanvasMutationObserver = function (win, blockClass) {\n        this.startRAFTimestamping();\n        this.startPendingCanvasMutationFlusher();\n        var canvasContextReset = initCanvasContextObserver(win, blockClass);\n        var canvas2DReset = initCanvas2DMutationObserver(this.processMutation.bind(this), win, blockClass, this.mirror);\n        var canvasWebGL1and2Reset = initCanvasWebGLMutationObserver(this.processMutation.bind(this), win, blockClass, this.mirror);\n        this.resetObservers = function () {\n            canvasContextReset();\n            canvas2DReset();\n            canvasWebGL1and2Reset();\n        };\n    };\n    CanvasManager.prototype.startPendingCanvasMutationFlusher = function () {\n        var _this = this;\n        requestAnimationFrame(function () { return _this.flushPendingCanvasMutations(); });\n    };\n    CanvasManager.prototype.startRAFTimestamping = function () {\n        var _this = this;\n        var setLatestRAFTimestamp = function (timestamp) {\n            _this.rafStamps.latestId = timestamp;\n            requestAnimationFrame(setLatestRAFTimestamp);\n        };\n        requestAnimationFrame(setLatestRAFTimestamp);\n    };\n    CanvasManager.prototype.flushPendingCanvasMutations = function () {\n        var _this = this;\n        this.pendingCanvasMutations.forEach(function (values, canvas) {\n            var id = _this.mirror.getId(canvas);\n            _this.flushPendingCanvasMutationFor(canvas, id);\n        });\n        requestAnimationFrame(function () { return _this.flushPendingCanvasMutations(); });\n    };\n    CanvasManager.prototype.flushPendingCanvasMutationFor = function (canvas, id) {\n        if (this.frozen || this.locked) {\n            return;\n        }\n        var valuesWithType = this.pendingCanvasMutations.get(canvas);\n        if (!valuesWithType || id === -1)\n            return;\n        var values = valuesWithType.map(function (value) {\n            value.type; var rest = __rest(value, [\"type\"]);\n            return rest;\n        });\n        var type = valuesWithType[0].type;\n        this.mutationCb({ id: id, type: type, commands: values });\n        this.pendingCanvasMutations.delete(canvas);\n    };\n    return CanvasManager;\n}());\n\nexport { CanvasManager };\n"],"names":[],"mappings":"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"}