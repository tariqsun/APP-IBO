{"version":3,"file":"handleFetch.js","sources":["../../../../src/coreHandlers/handleFetch.ts"],"sourcesContent":["import type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\nimport { shouldFilterRequest } from '../util/shouldFilterRequest';\n\ninterface FetchHandlerData {\n  args: Parameters<typeof fetch>;\n  fetchData: {\n    method: string;\n    url: string;\n  };\n  response: {\n    type: string;\n    url: string;\n    redirected: boolean;\n    status: number;\n    ok: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** only exported for tests */\nexport function handleFetch(handlerData: FetchHandlerData): null | ReplayPerformanceEntry {\n  if (!handlerData.endTimestamp) {\n    return null;\n  }\n\n  const { startTimestamp, endTimestamp, fetchData, response } = handlerData;\n\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: fetchData.url,\n    data: {\n      method: fetchData.method,\n      statusCode: response.status,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('fetch', listener)`.\n */\nexport function handleFetchSpanListener(replay: ReplayContainer): (handlerData: FetchHandlerData) => void {\n  return (handlerData: FetchHandlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleFetch(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    if (shouldFilterRequest(replay, result.name)) {\n      return;\n    }\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning true will cause `addUpdate` to not flush\n      // We do not want network requests to cause a flush. This will prevent\n      // recurring/polling requests from keeping the replay session alive.\n      return true;\n    });\n  };\n}\n"],"names":[],"mappings":";;;AAqBA;AACA,SAAA,WAAA,CAAA,WAAA,EAAA;AACA,EAAA,IAAA,CAAA,WAAA,CAAA,YAAA,EAAA;AACA,IAAA,OAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,EAAA,cAAA,EAAA,YAAA,EAAA,SAAA,EAAA,QAAA,EAAA,GAAA,WAAA,CAAA;AACA;AACA,EAAA,OAAA;AACA,IAAA,IAAA,EAAA,gBAAA;AACA,IAAA,KAAA,EAAA,cAAA,GAAA,IAAA;AACA,IAAA,GAAA,EAAA,YAAA,GAAA,IAAA;AACA,IAAA,IAAA,EAAA,SAAA,CAAA,GAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,MAAA,EAAA,SAAA,CAAA,MAAA;AACA,MAAA,UAAA,EAAA,QAAA,CAAA,MAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,uBAAA,CAAA,MAAA,EAAA;AACA,EAAA,OAAA,CAAA,WAAA,KAAA;AACA,IAAA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;AACA,MAAA,OAAA;AACA,KAAA;AACA;AACA,IAAA,MAAA,MAAA,GAAA,WAAA,CAAA,WAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,MAAA,KAAA,IAAA,EAAA;AACA,MAAA,OAAA;AACA,KAAA;AACA;AACA,IAAA,IAAA,mBAAA,CAAA,MAAA,EAAA,MAAA,CAAA,IAAA,CAAA,EAAA;AACA,MAAA,OAAA;AACA,KAAA;AACA;AACA,IAAA,MAAA,CAAA,SAAA,CAAA,MAAA;AACA,MAAA,sBAAA,CAAA,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;AACA,MAAA,OAAA,IAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA;;;;"}