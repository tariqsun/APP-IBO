{"version":3,"file":"getSession.js","sources":["../../../../src/session/getSession.ts"],"sourcesContent":["import { logger } from '@sentry/utils';\n\nimport type { Session, SessionOptions } from '../types';\nimport { isSessionExpired } from '../util/isSessionExpired';\nimport { createSession } from './createSession';\nimport { fetchSession } from './fetchSession';\n\ninterface GetSessionParams extends SessionOptions {\n  /**\n   * The length of time (in ms) which we will consider the session to be expired.\n   */\n  expiry: number;\n\n  /**\n   * The current session (e.g. if stickySession is off)\n   */\n  currentSession?: Session;\n}\n\n/**\n * Get or create a session\n */\nexport function getSession({\n  expiry,\n  currentSession,\n  stickySession,\n  sessionSampleRate,\n  errorSampleRate,\n}: GetSessionParams): { type: 'new' | 'saved'; session: Session } {\n  // If session exists and is passed, use it instead of always hitting session storage\n  const session = currentSession || (stickySession && fetchSession());\n\n  if (session) {\n    // If there is a session, check if it is valid (e.g. \"last activity\" time\n    // should be within the \"session idle time\", and \"session started\" time is\n    // within \"max session time\").\n    const isExpired = isSessionExpired(session, expiry);\n\n    if (!isExpired) {\n      return { type: 'saved', session };\n    } else {\n      __DEBUG_BUILD__ && logger.log('[Replay] Session has expired');\n    }\n    // Otherwise continue to create a new session\n  }\n\n  const newSession = createSession({\n    stickySession,\n    sessionSampleRate,\n    errorSampleRate,\n  });\n\n  return { type: 'new', session: newSession };\n}\n"],"names":[],"mappings":";;;;;AAmBA;AACA;AACA;AACA,SAAA,UAAA,CAAA;AACA,EAAA,MAAA;AACA,EAAA,cAAA;AACA,EAAA,aAAA;AACA,EAAA,iBAAA;AACA,EAAA,eAAA;AACA,CAAA,EAAA;AACA;AACA,EAAA,MAAA,OAAA,GAAA,cAAA,KAAA,aAAA,IAAA,YAAA,EAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,OAAA,EAAA;AACA;AACA;AACA;AACA,IAAA,MAAA,SAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,CAAA,SAAA,EAAA;AACA,MAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,CAAA;AACA,KAAA,MAAA;AACA,MAAA,iEAAA,MAAA,CAAA,GAAA,CAAA,8BAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,GAAA;AACA;AACA,EAAA,MAAA,UAAA,GAAA,aAAA,CAAA;AACA,IAAA,aAAA;AACA,IAAA,iBAAA;AACA,IAAA,eAAA;AACA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,CAAA;AACA;;;;"}