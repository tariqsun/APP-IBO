{"version":3,"file":"createPerformanceEntry.js","sources":["../../../src/createPerformanceEntry.ts"],"sourcesContent":["import { browserPerformanceTimeOrigin } from '@sentry/utils';\nimport { record } from 'rrweb';\n\nimport { WINDOW } from './constants';\nimport type {\n  AllPerformanceEntry,\n  PerformanceNavigationTiming,\n  PerformancePaintTiming,\n  ReplayPerformanceEntry,\n} from './types';\n\n// Map entryType -> function to normalize data for event\n// @ts-ignore TODO: entry type does not fit the create* functions entry type\nconst ENTRY_TYPES: Record<string, (entry: AllPerformanceEntry) => null | ReplayPerformanceEntry> = {\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  'largest-contentful-paint': createLargestContentfulPaint,\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nexport function createPerformanceEntries(entries: AllPerformanceEntry[]): ReplayPerformanceEntry[] {\n  return entries.map(createPerformanceEntry).filter(Boolean) as ReplayPerformanceEntry[];\n}\n\nfunction createPerformanceEntry(entry: AllPerformanceEntry): ReplayPerformanceEntry | null {\n  if (ENTRY_TYPES[entry.entryType] === undefined) {\n    return null;\n  }\n\n  return ENTRY_TYPES[entry.entryType](entry);\n}\n\nfunction getAbsoluteTime(time: number): number {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\nfunction createPaintEntry(entry: PerformancePaintTiming): ReplayPerformanceEntry {\n  const { duration, entryType, name, startTime } = entry;\n\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n  };\n}\n\nfunction createNavigationEntry(entry: PerformanceNavigationTiming): ReplayPerformanceEntry | null {\n  // TODO: There looks to be some more interesting bits in here (domComplete, domContentLoaded)\n  const { entryType, name, duration, domComplete, startTime, transferSize, type } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      duration,\n    },\n  };\n}\n\nfunction createResourceEntry(entry: PerformanceResourceTiming): ReplayPerformanceEntry | null {\n  const { entryType, initiatorType, name, responseEnd, startTime, encodedBodySize, transferSize } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      encodedBodySize,\n    },\n  };\n}\n\nfunction createLargestContentfulPaint(\n  entry: PerformanceEntry & { size: number; element: Node },\n): ReplayPerformanceEntry {\n  const { duration, entryType, startTime, size } = entry;\n\n  const start = getAbsoluteTime(startTime);\n\n  return {\n    type: entryType,\n    name: entryType,\n    start,\n    end: start + duration,\n    data: {\n      duration,\n      size,\n      // Not sure why this errors, Node should be correct (Argument of type 'Node' is not assignable to parameter of type 'INode')\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      nodeId: record.mirror.getId(entry.element as any),\n    },\n  };\n}\n"],"names":[],"mappings":"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"}