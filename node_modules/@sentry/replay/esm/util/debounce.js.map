{"version":3,"file":"debounce.js","sources":["../../../../src/util/debounce.ts"],"sourcesContent":["type DebouncedCallback = {\n  (): void | unknown;\n  flush: () => void | unknown;\n  cancel: () => void;\n};\ntype CallbackFunction = () => unknown;\ntype DebounceOptions = { maxWait?: number };\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nexport function debounce(func: CallbackFunction, wait: number, options?: DebounceOptions): DebouncedCallback {\n  let callbackReturnValue: unknown;\n\n  let timerId: ReturnType<typeof setTimeout> | undefined;\n  let maxTimerId: ReturnType<typeof setTimeout> | undefined;\n\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n\n  function invokeFunc(): unknown {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers(): void {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush(): unknown {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced(): unknown {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n"],"names":[],"mappings":"AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA;AACA,EAAA,IAAA,mBAAA,CAAA;AACA;AACA,EAAA,IAAA,OAAA,CAAA;AACA,EAAA,IAAA,UAAA,CAAA;AACA;AACA,EAAA,MAAA,OAAA,GAAA,OAAA,IAAA,OAAA,CAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,SAAA,UAAA,GAAA;AACA,IAAA,YAAA,EAAA,CAAA;AACA,IAAA,mBAAA,GAAA,IAAA,EAAA,CAAA;AACA,IAAA,OAAA,mBAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,SAAA,YAAA,GAAA;AACA,IAAA,OAAA,KAAA,SAAA,IAAA,YAAA,CAAA,OAAA,CAAA,CAAA;AACA,IAAA,UAAA,KAAA,SAAA,IAAA,YAAA,CAAA,UAAA,CAAA,CAAA;AACA,IAAA,OAAA,GAAA,UAAA,GAAA,SAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,SAAA,KAAA,GAAA;AACA,IAAA,IAAA,OAAA,KAAA,SAAA,IAAA,UAAA,KAAA,SAAA,EAAA;AACA,MAAA,OAAA,UAAA,EAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA,mBAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,SAAA,SAAA,GAAA;AACA,IAAA,IAAA,OAAA,EAAA;AACA,MAAA,YAAA,CAAA,OAAA,CAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA,GAAA,UAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,OAAA,IAAA,UAAA,KAAA,SAAA,EAAA;AACA,MAAA,UAAA,GAAA,UAAA,CAAA,UAAA,EAAA,OAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA,mBAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,SAAA,CAAA,MAAA,GAAA,YAAA,CAAA;AACA,EAAA,SAAA,CAAA,KAAA,GAAA,KAAA,CAAA;AACA,EAAA,OAAA,SAAA,CAAA;AACA;;;;"}