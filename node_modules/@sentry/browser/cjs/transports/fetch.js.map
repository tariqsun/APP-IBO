{"version":3,"file":"fetch.js","sources":["../../../../src/transports/fetch.ts"],"sourcesContent":["import { createTransport } from '@sentry/core';\nimport { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport { BrowserTransportOptions } from './types';\nimport { clearCachedFetchImplementation, FetchImpl, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch), a request with `keepalive: true`\n      //   and a content length of > 64 kibibytes returns a network error. We will therefore only activate the flag when\n      //   we're below that limit.\n      keepalive: request.body.length <= 65536,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => ({\n        statusCode: response.status,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After'),\n        },\n      }));\n    } catch (e) {\n      clearCachedFetchImplementation();\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n"],"names":["getNativeFetchImplementation","clearCachedFetchImplementation","rejectedSyncPromise","createTransport"],"mappings":";;;;;;AAOA;AACA;AACA;AACA,SAAA,kBAAA;AACA,EAAA,OAAA;AACA,EAAA,WAAA,GAAAA,kCAAA,EAAA;AACA,EAAA;AACA,EAAA,SAAA,WAAA,CAAA,OAAA,EAAA;AACA,IAAA,MAAA,cAAA,GAAA;AACA,MAAA,IAAA,EAAA,OAAA,CAAA,IAAA;AACA,MAAA,MAAA,EAAA,MAAA;AACA,MAAA,cAAA,EAAA,QAAA;AACA,MAAA,OAAA,EAAA,OAAA,CAAA,OAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,SAAA,EAAA,OAAA,CAAA,IAAA,CAAA,MAAA,IAAA,KAAA;AACA,MAAA,GAAA,OAAA,CAAA,YAAA;AACA,KAAA,CAAA;AACA;AACA,IAAA,IAAA;AACA,MAAA,OAAA,WAAA,CAAA,OAAA,CAAA,GAAA,EAAA,cAAA,CAAA,CAAA,IAAA,CAAA,QAAA,KAAA;AACA,QAAA,UAAA,EAAA,QAAA,CAAA,MAAA;AACA,QAAA,OAAA,EAAA;AACA,UAAA,sBAAA,EAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,CAAA;AACA,UAAA,aAAA,EAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,aAAA,CAAA;AACA,SAAA;AACA,OAAA,CAAA,CAAA,CAAA;AACA,KAAA,CAAA,OAAA,CAAA,EAAA;AACA,MAAAC,oCAAA,EAAA,CAAA;AACA,MAAA,OAAAC,2BAAA,CAAA,CAAA,CAAA,CAAA;AACA,KAAA;AACA,GAAA;AACA;AACA,EAAA,OAAAC,oBAAA,CAAA,OAAA,EAAA,WAAA,CAAA,CAAA;AACA;;;;"}